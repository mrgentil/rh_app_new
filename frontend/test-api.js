// Script de test pour v√©rifier l'API des employ√©s
const testAPI = async () => {
  try {
    console.log('üß™ Test de l\'API des employ√©s...');
    
    // Test 1: Health check du backend
    console.log('1. Test du health check...');
    const healthResponse = await fetch('http://localhost:3001/health');
    const healthData = await healthResponse.json();
    console.log('‚úÖ Health check:', healthData);
    
    // Test 2: R√©cup√©ration des employ√©s
    console.log('2. Test de r√©cup√©ration des employ√©s...');
    const employeesResponse = await fetch('http://localhost:3001/api/employees');
    
    if (!employeesResponse.ok) {
      throw new Error(`Erreur HTTP: ${employeesResponse.status} ${employeesResponse.statusText}`);
    }
    
    const employees = await employeesResponse.json();
    console.log('‚úÖ Employ√©s r√©cup√©r√©s:', employees.length, 'employ√©s');
    console.log('üìã Premier employ√©:', employees[0] || 'Aucun employ√© trouv√©');
    
    // Test 3: Test via le rewrite Next.js
    console.log('3. Test via le rewrite Next.js...');
    const rewriteResponse = await fetch('/api/employees');
    
    if (!rewriteResponse.ok) {
      throw new Error(`Erreur rewrite: ${rewriteResponse.status} ${rewriteResponse.statusText}`);
    }
    
    const rewriteEmployees = await rewriteResponse.json();
    console.log('‚úÖ Rewrite fonctionne:', rewriteEmployees.length, 'employ√©s');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
  }
};

// Ex√©cuter le test si on est dans un navigateur
if (typeof window !== 'undefined') {
  testAPI();
} else {
  console.log('Ce script doit √™tre ex√©cut√© dans un navigateur');
} 