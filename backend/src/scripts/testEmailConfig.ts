import { emailService } from '../services/emailService';
import { sequelize } from '../models/sequelize';
import dotenv from 'dotenv';

dotenv.config();

async function testEmailConfig() {
  try {
    console.log('üß™ Test de la configuration email...\n');

    // Afficher la configuration actuelle
    console.log('üìß Configuration email d√©tect√©e:');
    console.log(`- Host: ${process.env.MAIL_HOST || process.env.EMAIL_HOST || 'smtp.gmail.com'}`);
    console.log(`- Port: ${process.env.MAIL_PORT || process.env.EMAIL_PORT || '587'}`);
    console.log(`- Username: ${process.env.MAIL_USERNAME || process.env.EMAIL_USER || 'Non configur√©'}`);
    console.log(`- Password: ${process.env.MAIL_PASSWORD || process.env.EMAIL_PASS ? 'Configur√©' : 'Non configur√©'}`);
    console.log(`- Encryption: ${process.env.MAIL_ENCRYPTION || 'tls'}`);
    console.log(`- From Address: ${process.env.MAIL_FROM_ADDRESS || 'Non configur√©'}`);
    console.log('');

    // Test de connexion √† la base de donn√©es
    console.log('1. Test de connexion √† la base de donn√©es...');
    await sequelize.authenticate();
    console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie\n');

    // V√©rifier que les variables sont configur√©es
    const emailUser = process.env.MAIL_USERNAME || process.env.EMAIL_USER;
    const emailPass = process.env.MAIL_PASSWORD || process.env.EMAIL_PASS;

    if (!emailUser || !emailPass) {
      console.log('‚ùå Configuration email manquante !');
      console.log('Veuillez configurer MAIL_USERNAME et MAIL_PASSWORD dans votre fichier .env');
      return;
    }

    // Test d'envoi d'email
    console.log('2. Test d\'envoi d\'email...');
    const testEmail = emailUser; // Envoyer √† l'exp√©diteur pour le test
    
    try {
      await emailService.sendPasswordResetEmail(
        testEmail,
        'testuser',
        emailService.generateResetToken(1, testEmail)
      );
      console.log(`‚úÖ Email de test envoy√© avec succ√®s √† ${testEmail}`);
      console.log('üìß V√©rifiez votre bo√Æte mail (et les spams)');
    } catch (error: any) {
      console.log('‚ùå Erreur lors de l\'envoi de l\'email:');
      console.log(error.message);
      
      if (error.code === 'EAUTH') {
        console.log('\nüîß Solutions possibles :');
        console.log('1. V√©rifiez que l\'authentification √† 2 facteurs est activ√©e sur Gmail');
        console.log('2. V√©rifiez que vous utilisez un mot de passe d\'application (pas votre mot de passe normal)');
        console.log('3. V√©rifiez que MAIL_USERNAME et MAIL_PASSWORD sont corrects dans .env');
        console.log('4. V√©rifiez que le mot de passe d\'application est √† jour');
      }
      
      if (error.code === 'ECONNECTION') {
        console.log('\nüîß Probl√®me de connexion :');
        console.log('1. V√©rifiez votre connexion internet');
        console.log('2. V√©rifiez que le port 587 n\'est pas bloqu√© par votre pare-feu');
      }
    }

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  } finally {
    await sequelize.close();
  }
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
  testEmailConfig();
}

export { testEmailConfig }; 