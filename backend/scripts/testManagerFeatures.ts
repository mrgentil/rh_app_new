import axios from 'axios';

async function testManagerFeatures() {
  const baseURL = 'http://localhost:3001';
  const api = axios.create({ baseURL, withCredentials: true });

  try {
    console.log('üß™ Test des fonctionnalit√©s de management...\n');

    // 1. Test de connexion Manager
    console.log('1Ô∏è‚É£ Test de connexion Manager...');
    const loginResponse = await api.post('/api/auth/login', {
      username: 'mrgentil',
      password: 'password123'
    });
    console.log('‚úÖ Connexion Manager r√©ussie');

    // Extraire le token
    const cookies = loginResponse.headers['set-cookie'];
    const tokenCookie = cookies?.find(cookie => cookie.startsWith('token='));
    const token = tokenCookie?.split(';')[0].split('=')[1];

    if (!token) {
      throw new Error('Token non trouv√©');
    }

    const headers = { 'Authorization': `Bearer ${token}` };

    // 2. Test r√©cup√©ration des √©quipes
    console.log('\n2Ô∏è‚É£ Test r√©cup√©ration des √©quipes...');
    const teamsResponse = await api.get('/api/teams', { headers });
    console.log(`‚úÖ ${teamsResponse.data.length} √©quipes r√©cup√©r√©es`);
    
    if (teamsResponse.data.length > 0) {
      const firstTeam = teamsResponse.data[0];
      console.log(`   - √âquipe: ${firstTeam.name} (${firstTeam.members.length} membres)`);
    }

    // 3. Test r√©cup√©ration des objectifs
    console.log('\n3Ô∏è‚É£ Test r√©cup√©ration des objectifs...');
    const objectivesResponse = await api.get('/api/objectives', { headers });
    console.log(`‚úÖ ${objectivesResponse.data.length} objectifs r√©cup√©r√©s`);
    
    if (objectivesResponse.data.length > 0) {
      const firstObjective = objectivesResponse.data[0];
      console.log(`   - Objectif: ${firstObjective.title} (${firstObjective.progress}%)`);
    }

    // 4. Test cr√©ation d'un objectif
    console.log('\n4Ô∏è‚É£ Test cr√©ation d\'un objectif...');
    const newObjective = {
      title: 'Test Objectif Manager',
      description: 'Objectif de test cr√©√© par le manager',
      type: 'individual',
      employeeId: 1, // Premier employ√©
      priority: 'medium',
      dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()
    };

    const createObjectiveResponse = await api.post('/api/objectives', newObjective, { headers });
    console.log(`‚úÖ Objectif cr√©√©: ${createObjectiveResponse.data.title}`);

    // 5. Test r√©cup√©ration des employ√©s (vue Manager)
    console.log('\n5Ô∏è‚É£ Test r√©cup√©ration des employ√©s...');
    const employeesResponse = await api.get('/api/employees', { headers });
    console.log(`‚úÖ ${employeesResponse.data.length} employ√©s r√©cup√©r√©s`);

    // 6. Test r√©cup√©ration du profil
    console.log('\n6Ô∏è‚É£ Test r√©cup√©ration du profil...');
    const profileResponse = await api.get('/api/profile/me', { headers });
    console.log(`‚úÖ Profil r√©cup√©r√©: ${profileResponse.data.firstName} ${profileResponse.data.lastName}`);

    // 7. Test des permissions (tentative d'acc√®s aux utilisateurs)
    console.log('\n7Ô∏è‚É£ Test des permissions...');
    try {
      await api.get('/api/users', { headers });
      console.log('‚ö†Ô∏è  Acc√®s aux utilisateurs autoris√© (peut-√™tre un Manager avec permissions √©tendues)');
    } catch (error: any) {
      if (error.response?.status === 403) {
        console.log('‚úÖ Acc√®s aux utilisateurs correctement refus√© pour le Manager');
      } else {
        console.log(`‚ùå Erreur inattendue: ${error.response?.status}`);
      }
    }

    console.log('\nüéâ Tous les tests de management sont pass√©s avec succ√®s !');
    console.log('\nüìä R√©sum√© des fonctionnalit√©s test√©es:');
    console.log('   ‚úÖ Connexion Manager');
    console.log('   ‚úÖ R√©cup√©ration des √©quipes');
    console.log('   ‚úÖ R√©cup√©ration des objectifs');
    console.log('   ‚úÖ Cr√©ation d\'objectifs');
    console.log('   ‚úÖ R√©cup√©ration des employ√©s');
    console.log('   ‚úÖ R√©cup√©ration du profil');
    console.log('   ‚úÖ V√©rification des permissions');

  } catch (error: any) {
    console.error('\n‚ùå Erreur lors des tests:', error.response?.data || error.message);
  }
}

testManagerFeatures(); 