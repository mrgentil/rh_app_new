import { sequelize } from '../src/models/sequelize';
import '../src/models'; // Import des associations
import { Role } from '../src/models/Role';

async function fixManagerProfilePermission() {
  try {
    await sequelize.authenticate();
    console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie');

    // Trouver le r√¥le Manager
    const managerRole = await Role.findOne({
      where: { name: 'Manager' }
    });

    if (!managerRole) {
      console.log('‚ùå R√¥le Manager non trouv√©');
      return;
    }

    console.log('üîç R√¥le Manager trouv√©:');
    console.log('   - ID:', managerRole.id);
    console.log('   - Nom:', managerRole.name);
    console.log('   - Permissions actuelles:', managerRole.permissions);

    // Ajouter la permission 'profile' si elle n'existe pas d√©j√†
    const currentPermissions = JSON.parse(managerRole.permissions || '[]');
    
    if (!currentPermissions.includes('profile')) {
      currentPermissions.push('profile');
      
      await managerRole.update({
        permissions: JSON.stringify(currentPermissions)
      });
      
      console.log('‚úÖ Permission "profile" ajout√©e au r√¥le Manager');
      console.log('   - Nouvelles permissions:', currentPermissions);
    } else {
      console.log('‚ÑπÔ∏è La permission "profile" existe d√©j√† pour le r√¥le Manager');
    }

    // V√©rifier les autres r√¥les qui devraient avoir la permission profile
    const allRoles = await Role.findAll();
    console.log('\nüîç V√©rification des permissions de tous les r√¥les:');
    
    allRoles.forEach(role => {
      const permissions = JSON.parse(role.permissions || '[]');
      const hasProfile = permissions.includes('profile');
      console.log(`   - ${role.name}: ${hasProfile ? '‚úÖ' : '‚ùå'} profile`);
    });

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await sequelize.close();
  }
}

fixManagerProfilePermission(); 