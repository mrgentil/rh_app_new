import { sequelize } from '../src/models/sequelize';
import { Team, Objective, Project, PerformanceReview } from '../src/models';

async function createManagerTables() {
  try {
    console.log('üîÑ Cr√©ation des tables de gestion d\'√©quipe...');

    // Synchroniser les mod√®les avec la base de donn√©es
    await sequelize.sync({ alter: true });

    console.log('‚úÖ Tables cr√©√©es avec succ√®s !');

    // Ajouter le champ teamId √† la table employees si n√©cessaire
    try {
      await sequelize.query(`
        ALTER TABLE employees 
        ADD COLUMN teamId INT UNSIGNED NULL,
        ADD CONSTRAINT fk_employees_team 
        FOREIGN KEY (teamId) REFERENCES teams(id) 
        ON DELETE SET NULL ON UPDATE CASCADE
      `);
      console.log('‚úÖ Champ teamId ajout√© √† la table employees');
    } catch (error: any) {
      if (error.message.includes('Duplicate column name')) {
        console.log('‚ÑπÔ∏è Champ teamId d√©j√† pr√©sent dans la table employees');
      } else {
        console.error('‚ùå Erreur lors de l\'ajout du champ teamId:', error.message);
      }
    }

    console.log('üéâ Toutes les tables de gestion d\'√©quipe sont pr√™tes !');
    
    // Afficher les tables cr√©√©es
    const tables = await sequelize.showAllSchemas({});
    console.log('üìã Tables disponibles:', tables.map((t: any) => t.name));

  } catch (error: any) {
    console.error('‚ùå Erreur lors de la cr√©ation des tables:', error.message);
  } finally {
    await sequelize.close();
  }
}

createManagerTables(); 