import { sequelize } from '../src/models/sequelize';

async function fixEmployeeIssues() {
  try {
    console.log('üîß D√©but de la correction des probl√®mes employ√©s...');

    // 1. V√©rifier et corriger les contraintes de cl√© √©trang√®re managerId
    console.log('üîç V√©rification des contraintes managerId...');
    
    // R√©cup√©rer tous les employ√©s avec un managerId invalide
    const employeesWithInvalidManager = await sequelize.query(`
      SELECT e1.id, e1.firstName, e1.lastName, e1.managerId
      FROM employees e1
      LEFT JOIN employees e2 ON e1.managerId = e2.id
      WHERE e1.managerId IS NOT NULL AND e2.id IS NULL
    `);

    if ((employeesWithInvalidManager[0] as any[]).length > 0) {
      console.log(`‚ö†Ô∏è ${(employeesWithInvalidManager[0] as any[]).length} employ√©s avec un managerId invalide trouv√©s`);
      
      for (const emp of employeesWithInvalidManager[0] as any[]) {
        console.log(`  - ${emp.firstName} ${emp.lastName} (ID: ${emp.id}) a un managerId invalide: ${emp.managerId}`);
        
        // Mettre √† jour pour mettre managerId √† NULL
        await sequelize.query(`
          UPDATE employees 
          SET managerId = NULL 
          WHERE id = ${emp.id}
        `);
        console.log(`    ‚úÖ managerId mis √† NULL pour ${emp.firstName} ${emp.lastName}`);
      }
    } else {
      console.log('‚úÖ Aucun employ√© avec managerId invalide trouv√©');
    }

    // 2. V√©rifier que la colonne matricule existe et a des valeurs
    console.log('üîç V√©rification de la colonne matricule...');
    
    const [matriculeCheck] = await sequelize.query(`
      SELECT COLUMN_NAME 
      FROM INFORMATION_SCHEMA.COLUMNS 
      WHERE TABLE_SCHEMA = 'my_rh_app' 
      AND TABLE_NAME = 'employees' 
      AND COLUMN_NAME = 'matricule'
    `);

    if ((matriculeCheck as any[]).length === 0) {
      console.log('‚ùå Colonne matricule manquante, ajout...');
      await sequelize.query(`
        ALTER TABLE employees 
        ADD COLUMN matricule VARCHAR(255) NULL
      `);
      console.log('‚úÖ Colonne matricule ajout√©e');
    } else {
      console.log('‚úÖ Colonne matricule existe');
    }

    // G√©n√©rer des matricules pour les employ√©s qui n'en ont pas
    const employeesWithoutMatricule = await sequelize.query(`
      SELECT id, firstName, lastName 
      FROM employees 
      WHERE matricule IS NULL 
      ORDER BY id ASC
    `);

    if ((employeesWithoutMatricule[0] as any[]).length > 0) {
      console.log(`üìù G√©n√©ration de matricules pour ${(employeesWithoutMatricule[0] as any[]).length} employ√©s...`);
      
      // Trouver le dernier matricule existant
      const lastMatriculeResult = await sequelize.query(`
        SELECT matricule 
        FROM employees 
        WHERE matricule IS NOT NULL 
        ORDER BY id DESC 
        LIMIT 1
      `);

      let nextNumber = 1;
      if ((lastMatriculeResult[0] as any[]).length > 0) {
        const lastMatricule = (lastMatriculeResult[0] as any[])[0].matricule;
        const lastNumber = parseInt(lastMatricule.replace('EMP', ''));
        nextNumber = lastNumber + 1;
      }

      for (const employee of employeesWithoutMatricule[0] as any[]) {
        const matricule = `EMP${String(nextNumber).padStart(3, '0')}`;
        await sequelize.query(`
          UPDATE employees 
          SET matricule = '${matricule}' 
          WHERE id = ${employee.id}
        `);
        console.log(`  ‚úÖ ${matricule} attribu√© √† ${employee.firstName} ${employee.lastName}`);
        nextNumber++;
      }
    } else {
      console.log('‚úÖ Tous les employ√©s ont d√©j√† un matricule');
    }

    // 3. Ajouter la contrainte UNIQUE et NOT NULL sur matricule si pas d√©j√† fait
    console.log('üîí V√©rification des contraintes matricule...');
    
    const [uniqueCheck] = await sequelize.query(`
      SELECT CONSTRAINT_NAME 
      FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
      WHERE TABLE_SCHEMA = 'my_rh_app' 
      AND TABLE_NAME = 'employees' 
      AND CONSTRAINT_NAME = 'unique_matricule'
    `);

    if ((uniqueCheck as any[]).length === 0) {
      console.log('üîí Ajout de la contrainte UNIQUE sur matricule...');
      await sequelize.query(`
        ALTER TABLE employees 
        MODIFY COLUMN matricule VARCHAR(255) NOT NULL,
        ADD UNIQUE KEY unique_matricule (matricule)
      `);
      console.log('‚úÖ Contrainte UNIQUE ajout√©e');
    } else {
      console.log('‚úÖ Contrainte UNIQUE existe d√©j√†');
    }

    // 4. V√©rifier que tous les champs requis existent
    console.log('üîç V√©rification des champs requis...');
    
    const requiredFields = [
      'salary', 'city', 'postalCode', 'country', 
      'emergencyContactName', 'emergencyContactPhone', 'emergencyContactRelationship'
    ];

    for (const field of requiredFields) {
      const [fieldCheck] = await sequelize.query(`
        SELECT COLUMN_NAME 
        FROM INFORMATION_SCHEMA.COLUMNS 
        WHERE TABLE_SCHEMA = 'my_rh_app' 
        AND TABLE_NAME = 'employees' 
        AND COLUMN_NAME = '${field}'
      `);

      if ((fieldCheck as any[]).length === 0) {
        console.log(`‚ùå Champ ${field} manquant, ajout...`);
        // Ajouter le champ selon son type
        let sqlType = 'VARCHAR(255)';
        if (field === 'salary') sqlType = 'DECIMAL(10,2)';
        if (field === 'postalCode') sqlType = 'VARCHAR(20)';
        if (field === 'country') sqlType = 'VARCHAR(100)';
        if (field === 'emergencyContactPhone') sqlType = 'VARCHAR(50)';
        if (field === 'emergencyContactRelationship') sqlType = 'VARCHAR(100)';
        
        await sequelize.query(`
          ALTER TABLE employees 
          ADD COLUMN ${field} ${sqlType} DEFAULT NULL
        `);
        console.log(`‚úÖ Champ ${field} ajout√©`);
      } else {
        console.log(`‚úÖ Champ ${field} existe`);
      }
    }

    console.log('üéâ Tous les probl√®mes ont √©t√© corrig√©s avec succ√®s !');
    
    // Afficher un r√©sum√©
    const [totalResult] = await sequelize.query('SELECT COUNT(*) as total FROM employees');
    const totalEmployees = (totalResult as any[])[0].total;
    console.log(`üìä R√©sum√©: ${totalEmployees} employ√©s dans la base de donn√©es`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la correction:', error);
  } finally {
    await sequelize.close();
  }
}

fixEmployeeIssues(); 