import { Role } from '../src/models';
import { sequelize } from '../src/models/sequelize';
import { ROLE_PERMISSIONS } from '../src/types/permissions';

async function initializeRoles() {
  try {
    await sequelize.authenticate();
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie.');

    // Supprimer tous les r√¥les existants
    await Role.destroy({ where: {} });
    console.log('üóëÔ∏è R√¥les existants supprim√©s.');

    // Cr√©er les r√¥les avec leurs permissions
    const rolesToCreate = [
      {
        name: 'Admin',
        permissions: JSON.stringify(ROLE_PERMISSIONS.ADMIN)
      },
      {
        name: 'RH',
        permissions: JSON.stringify(ROLE_PERMISSIONS.RH)
      },
      {
        name: 'Manager',
        permissions: JSON.stringify(ROLE_PERMISSIONS.MANAGER)
      },
      {
        name: 'Employee',
        permissions: JSON.stringify(ROLE_PERMISSIONS.EMPLOYEE)
      }
    ];

    for (const roleData of rolesToCreate) {
      await Role.create(roleData);
      console.log(`‚úÖ R√¥le "${roleData.name}" cr√©√© avec ${JSON.parse(roleData.permissions).length} permissions.`);
    }

    console.log('\nüéâ Initialisation des r√¥les termin√©e avec succ√®s !');
    console.log('\nüìã R√¥les cr√©√©s :');
    console.log('- Admin : Acc√®s complet √† toutes les fonctionnalit√©s');
    console.log('- RH : Gestion des employ√©s, utilisateurs, cong√©s, paie');
    console.log('- Manager : Gestion de son √©quipe et approbation des cong√©s');
    console.log('- Employee : Acc√®s limit√© √† ses propres donn√©es');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation des r√¥les:', error);
  } finally {
    await sequelize.close();
  }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  initializeRoles();
}

export default initializeRoles; 